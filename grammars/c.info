A.1.1 Lexical Elements

6.4 token := keyword | identifier | constant | string-literal | punctuator
6.4 preprocessing-token := header-name | identifier | pp-number | character-constant | string-literal | punctuator

A.1.2 Keywords

6.4.1 keyword := 'auto' | 'enum' | ...

A.1.3 Identifiers

6.4.2.1 identifier := identifier-nondigit
6.4.2.1 identifier := identifier + identifier-nondigit
6.4.2.1 identifier := identifier + digit
6.4.2.1 identifier-nondigit := nondigit | universal-character-name
6.4.2.1 nondigit := [a-zA-Z_]
6.4.2.1 digit = [0-9]

A.1.4 Universal Character Names

6.4.3 universal-character-name := '\u' + hex-quad
6.4.3 universal-character-name := '\U' + hex-quad + hex-quad
6.4.3 hex-quad := hexadecimal-digit + hexadecimal-digit + hexadecimal-digit + hexadecimal-digit

A.1.5 Constants

6.4.4 constant := integer-contant | floating-constant | enumeration-constant | character-constant
6.4.4.1 integer-constant := decimal-constant + integer-suffix-opt
6.4.4.1 integer-constant := octal-constant + integer-suffix-opt
6.4.4.1 integer-constant := hexadecimal-constant + integer-suffix-opt
6.4.4.1 decimal-constant := nonzero-digit | decimal-constant + digit
6.4.4.1 octal-constant := '0' | octal-constant + octal-digit
6.4.4.1 hexadecimal-constant := hexadecimal-prefix + hexadecimal-digit
6.4.4.1 hexadecimal-constant := hexadecimal-constant + hexadecimal-digit
6.4.4.1 hexadecimal-prefix := '0x' | '0X'
6.4.4.1 nonzero-digit := [1-9]
6.4.4.1 octal-digit := [0-7]
6.4.4.1 hexadecimal-digit := [0-9a-zA-Z]
6.4.4.1 integer-suffix := unsigned-suffix + long-suffix-opt
6.4.4.1 integer-suffix := unsigned-suffix + long-long-suffix
6.4.4.1 integer-suffix := long-suffix + unsigned-suffix-opt
6.4.4.1 integer-suffix := long-long-suffix + unsigned-suffix-opt
6.4.4.1 unsigned-suffix := 'u' | 'U'
6.4.4.1 long-suffix := 'l' | 'L'
6.4.4.1 long-long-suffix := 'll' | 'LL'
6.4.4.2 floating-constant := decimal-floating-constant | hexadecimal-floating-constant
6.4.4.2 decimal-floating-constant := fractional-constant + exponent-part-opt + floating-suffix-opt
6.4.4.2 decimal-floating-constant := digit-sequence + exponent-part + floating-suffix-opt
6.4.4.2 hexadecimal-floating-constant := hexadecimal-prefix + hexadecimal-fractional-constant + binary-exponent-part + floating-suffix-opt
6.4.4.2 hexadecimal-floating-constant := hexadecimal-prefix + hexadecimal-digit-sequence + binary-exponent-part + floating-suffix-opt
6.4.4.2 fractional-constant := digit-sequence-opt + '.' + digit-sequence
6.4.4.2 fractional-constant := digit-sequence + '.'
6.4.4.2 exponent-part := 'e' + sign-opt + digit-sequence
6.4.4.2 exponent-part := 'E' + sign-opt + digit-sequence
6.4.4.2 sign := '+' | '-'
6.4.4.2 digit-sequence := digit | digit-sequence + digit
6.4.4.2 hexadecimal-fractional-constant := hexadecimal-digit-sequence-opt + '.' + hexadcimal-digit-sequence
6.4.4.2 hexadecimal-fractional-constant := hexadecimal-digit-sequence + '.'
6.4.4.2 binary-exponent-part := 'p' + sign-opt + digit-sequence
6.4.4.2 binary-exponent-part := 'P' + sign-opt + digit-sequence
6.4.4.2 floating-suffix := 'f' | 'l' | 'F' | 'L'
6.4.4.3 enumeration-constant := identifier
6.4.4.4 character-constant := '\'' + c-char-sequence + '\''
6.4.4.4 character-constant := 'L' + '\'' + c-char-sequence + '\''
6.4.4.4 c-char-sequence := c-char | c-char-sequence + c-char
6.4.4.4 c-char := [^'\\\n] | escape-sequence
6.4.4.4 escape-sequence := simple-escape-sequence | octal-escape-sequence | hexadecimal-escape-sequence | universal-character-name
6.4.4.4 simple-escape-sequence := \\['"?\\abfnrtv]
6.4.4.4 octal-escape-sequence := '\' + octal-digit
6.4.4.4 octal-escape-sequence := '\' + octal-digit + octal-digit
6.4.4.4 octal-escape-sequence := '\' + octal-digit + octal-digit + octal-digit
6.4.4.4 hexadecimal-escape-sequence := '\' + 'x' + hexadecimal-digit
6.4.4.4 hexadecimal-escape-sequence := hexadecimal-escape-sequence + hexadecimal-digit

A.1.6 String Literals

6.4.5 string-literal := '"' + s-char-sequence-opt + '"'
6.4.5 string-literal := 'L' + '"' + s-char-sequence-opt + '"'
6.4.5 s-char-sequence := s-char | s-char-sequence + s-char
6.4.5 s-char := [^"\\\n]
6.4.5 s-char := escape-sequence

A.1.7 Punctuators

6.4.6 punctuator := '[' | ']' | ...

A.1.8 Header Names

6.4.7 header-name := '<' + h-char-sequence + '>'
6.4.7 header-name := '"' + q-char-sequence + '"'
6.4.7 h-char-sequence := h-char | h-char-sequence + h-char
6.4.7 h-char := [^\n>]
6.4.7 q-char-sequence := q-char | q-char-sequence + q-char
6.4.7 q-char := [^\n"]

A.1.9 Preprocessing Numbers

6.4.8 pp-number := digit | '.' + digit
6.4.8 pp-number := pp-number + digit
6.4.8 pp-number := pp-number + identifier-nondigit
6.4.8 pp-number := pp-number + 'e' + sign
6.4.8 pp-number := pp-number + 'E' + sign
6.4.8 pp-number := pp-number + 'p' + sign
6.4.8 pp-number := pp-number + 'P' + sign
6.4.8 pp-number := pp-number + '.'

A.2 Phrase Structure Grammar

A.2.1 Expressions

6.5.1 primary-expression := identifier | constant | string-literal | '(' + expression + ')'
6.5.2 postfix-expression := primary-expression
6.5.2 postfix-expression := postfix-expression + '[' + expression + ']'
6.5.2 postfix-expression := postfix-expression + '[' + argument-expression-list-opt + ']'
6.5.2 postfix-expression := postfix-expression + '.' + identifier
6.5.2 postfix-expression := postfix-expression + '->' + identifier
6.5.2 postfix-expression := postfix-expression + '++'
6.5.2 postfix-expression := postfix-expression + '--'
6.5.2 postfix-expression := '(' + type-name + ')' + '{' + initializer-list + '}'
6.5.2 postfix-expression := '(' + type-name + ')' + '{' + initializer-list + ',' + '}'
6.5.2 argument-expression-list := assignment-expression
6.5.2 argument-expression-list := argument-expression-list + ',' + assignment-expression
6.5.3 unary-expression := postfix-expression
6.5.3 unary-expression := '++' + unary-expression
6.5.3 unary-expression := '--' + unary-expression
6.5.3 unary-expression := unary-operator + cast-expression
6.5.3 unary-expression := 'sizeof' + unary-expression
6.5.3 unary-expression := 'sizeof' + '(' + type-name + ')'
6.5.3 unary-operator := '&' | '*' | '+' | '-' | '~' | '!'
6.5.4 cast-expression := unary-expression
6.5.4 cast-expression := '(' + type-name + ')' + cast-expression
6.5.5 multiplicative-expression := cast-expression
6.5.5 multiplicative-expression := multiplicative-expression + '*' + cast-expression 
6.5.5 multiplicative-expression := multiplicative-expression + '/' + cast-expression 
6.5.5 multiplicative-expression := multiplicative-expression + '%' + cast-expression 
6.5.6 additive-expression := multiplicative-expression
6.5.6 additive-expression := additive-expression + '+' + multiplicative-expression 
6.5.6 additive-expression := additive-expression + '-' + multiplicative-expression 
6.5.7 shift-expression := additive-expression
6.5.7 shift-expression := shift-expression + '<<' + additive-expression
6.5.7 shift-expression := shift-expression + '>>' + additive-expression
6.5.8 relational-expression := shift-expression
6.5.8 relational-expression := relational-expression + '<' + shift-expression
6.5.8 relational-expression := relational-expression + '>' + shift-expression
6.5.8 relational-expression := relational-expression + '<=' + shift-expression
6.5.8 relational-expression := relational-expression + '>=' + shift-expression
6.5.9 equality-expression := relational-expression
6.5.9 equality-expression := equality-expression + '==' + relational-expression
6.5.9 equality-expression := equality-expression + '!=' + relational-expression
6.5.10 and-expression := equality-expression
6.5.10 and-expression := and-expression + '&' equality-expression 
6.5.11 exclusive-or-expression := and-expression
6.5.11 exclusive-or-expression := inclusive-or-expression + '^' and-expression
6.5.12 inclusive-or-expression := exclusive-or-expression
6.5.12 inclusive-or-expression := inclusive-or-expression + '|' + exclusive-or-expression
6.5.13 logical-and-expression := inclusive-or-expression
6.5.13 logical-and-expression := logical-and-expression + '&&' + inclusive-or-expression
6.5.14 logical-or-expression := logical-and-expression
6.5.14 logical-or-expression := logical-or-expression + '||' + logical-and-expression
6.5.15 conditional-expression := logical-or-expression
6.5.15 conditional-expression := logical-or-expression + '?' + expression + ':' + conditional-expression
6.5.16 assignment-expression := conditional-expression
6.5.16 assignment-expression := unary-expression + assignment-operator + assignment-expression
6.5.16 assignment-operator := '=' | '*=' | ...
6.5.17 expression := assignment-expression 
6.5.17 expression := expression + ',' + assignment-expression
6.6 constant-expression := conditional-expression

A.2.2 Declarations

6.7 declaration := declaration-specifiers + init-declarator-list-opt
6.7 declaration-specifiers := storage-class-specifier + declaration-specifiers-opt
6.7 declaration-specifiers := type-specifier + declaration-specifiers-opt
6.7 declaration-specifiers := type-qualifier + declaration-specifiers-opt
6.7 declaration-specifiers := function-specifier + declaration-specifiers-opt
6.7 init-declarator-list := init-declarator
6.7 init-declarator-list := init-declarator-list + ',' + init-declarator
6.7 init-declarator := declarator | declarator + '=' + initializer

# How/where is it stored?
6.7.1 storage-class-specifier := 'typedef' | 'extern' | 'static' | 'auto' | 'register'

# What type is it?
6.7.2 type-specifier := 'void' | 'char' | 'short' | 'int' | 'long' | 'float' | 'double' | 'signed' | 'unsigned' | '_Bool' | '_Complex'
6.7.2 type-specifier := struct-or-union-specifier | enum-specifier | typedef-name
6.7.2.1 struct-or-union-specifier := struct-or-union + identifier-opt + '{' + struct-declaration-list + '}'
6.7.2.1 struct-or-union-specifier := struct-or-union + identifier
6.7.2.1 struct-or-union := 'struct' | 'union'
6.7.2.1 struct-declaration-list := struct-declaration
6.7.2.1 struct-declaration-list := struct-declaration-list + struct-declaration
6.7.2.1 struct-declaration := specifier-qualifier-list + struct-declarator-list + ';'
6.7.2.1 struct-or-union-specifier := struct-or-union + identifier
6.7.2.1 struct-or-union := 'struct' | 'union'
6.7.2.1 struct-declaration-list := struct-declaration
6.7.2.1 struct-declaration-list := struct-declaration-list + struct-declaration
6.7.2.1 struct-declaration := specifier-qualifier-list + struct-declarator-list + ';'
6.7.2.1 specifier-qualifier-list := type-specifier + specifier-qualifier-list-opt
6.7.2.1 specifier-qualifier-list := type-qualifier + specifier-qualifier-list-opt
6.7.2.1 struct-declarator-list := struct-declarator
6.7.2.1 struct-declarator-list := struct-declarator-list + ',' + struct-declarator
6.7.2.1 struct-declarator := declarator
6.7.2.1 struct-declarator := declarator-opt + := declarator
6.7.2.2 enum-specifier := 'enum' + identifier-opt + '{' + enumerator-list + '}'
6.7.2.2 enum-specifier := 'enum' + identifier-opt + '{' + enumerator-list + ',' + '}'
6.7.2.2 enum-specifier := 'enum' + identifier
6.7.2.2 enumerator-list := enumerator
6.7.2.2 enumerator-list := enumerator-list + ',' + enumerator
6.7.2.2 enumerator := enumeration-constant
6.7.2.2 enumerator := enumeration-constant + '=' + constant-expression

# What other properties does it have?
6.7.3 type-qualifier := 'const' | 'restrict' | 'volatile'
6.7.4 function-specifier := 'inline'

# What is its name/size/parameters?
6.7.5 declarator := pointer-opt + direct-declarator
6.7.5 direct-declarator := identifier
6.7.5 direct-declarator := '(' + declarator + ')'
6.7.5 direct-declarator := direct-declarator + '[' + type-qualifier-list-opt + assignment-expression-opt + ']'
6.7.5 direct-declarator := direct-declarator + '[' + 'static' + type-qualifier-list-opt + assignment-expression + ']'
6.7.5 direct-declarator := direct-declarator + '[' + list(type-qualifier) 'static' + assignment-expression + ']'
6.7.5 direct-declarator := direct-declarator + '[' + type-qualifier-list-opt + '*' + ']'
6.7.5 direct-declarator := direct-declarator + '(' + parameter-type-list + ')'
6.7.5 direct-declarator := direct-declarator + '(' + identifier-list-opt + ')'
6.7.5 pointer := '*' + type-qualifier-list-opt
6.7.5 pointer := '*' + type-qualifier-list-opt + pointer
6.7.5 type-qualifier-list-opt := list(type-qualifier) | _empty
6.7.5 parameter-type-list := parameter-list
6.7.5 parameter-type-list := parameter-list + ',' + '...'
6.7.5 parameter-list := parameter-declaration
6.7.5 parameter-list := parameter-list + ',' + parameter-declaration
6.7.5 parameter-declaration := declaration-specifiers + declarator
6.7.5 parameter-declaration := declaration-specifiers + abstract-declarator-opt
6.7.5 identifier-list := identifier
6.7.5 identifier-list := identifier-list + ',' + identifier
6.7.6 type-name := specifier-qualifier-list + abstract-declarator-opt
6.7.6 abstract-declarator := pointer
6.7.6 abstract-declarator := pointer-opt + direct-abstract-declarator
6.7.6 direct-abstract-declarator := '(' + abstract-declarator + ')'
6.7.6 direct-abstract-declarator := direct-abstract-declarator-opt + '[' + type-qualifier-list-opt + assignment-expression-opt + ']'
6.7.6 direct-abstract-declarator := direct-abstract-declarator-opt + '[' + 'static' + type-qualifier-list-opt + assignment-expression + ']'
6.7.6 direct-abstract-declarator := direct-abstract-declarator-opt + '[' + list(type-qualifier) + 'static' + assignment-expression + ']'
6.7.6 direct-abstract-declarator := direct-abstract-declarator-opt + '[' + '*' + ']'
6.7.6 direct-abstract-declarator := direct-abstract-declarator-opt + '(' + parameter-type-list-opt + ')'
6.7.7 typedef-name := identifier

# What is its initial value?
6.7.8 initializer := assignment-expression
6.7.8 initializer := '{' + initializer-list + '}'
6.7.8 initializer := '{' + initializer-list + ',' + '}'
6.7.8 initializer-list := designation-opt + initializer
6.7.8 initializer-list := initializer-list + ',' + designation-opt + initializer
6.7.8 designation := designator-list + '='
6.7.8 designation-list := designator
6.7.8 designation-list := designator-list + designator
6.7.8 designator := '[' + constant-expression + ']'
6.7.8 designator := '.' + identifier

A.2.3 Statements

6.8 statement := labeled-statement
6.8 statement := compound-statement
6.8 statement := expression-statement
6.8 statement := selection-statement
6.8 statement := iteration-statement
6.8 statement := jump-statement
6.8.1 labeled-statement := identifier + ':' + statement
6.8.1 labeled-statement := 'case' + constant-expression + ':' + statement
6.8.1 labeled-statement := 'default' + ':' + statement
6.8.2 compound-statement := '{' + block-item-list-opt + '}'
6.8.2 block-item-list := block-item
6.8.2 block-item-list := block-item-list + block-item
6.8.2 block-item := declaration | statement
6.8.3 expression-statement := expression-opt + ';'
6.8.4 selection-statement := 'if' + '(' + expression + ')' + statement
6.8.4 selection-statement := 'if' + '(' + expression + ')' + statement + 'else' + statement
6.8.4 selection-statement := 'switch' + '(' + expression + ')' + statement
6.8.5 iteration-statement := 'while' + '(' + expression + ')' + statement
6.8.5 iteration-statement := 'do' + statement + 'while' + '(' + expression + ')' + ';'
6.8.5 iteration-statement := 'for' + '(' + expression-opt + ';' + expression-opt + ';' + expression-opt + ')' + statement
6.8.5 iteration-statement := 'for' + '(' + declaration + expression-opt + ';' + expression-opt + ')' + statement
6.8.6 jump-statement := 'goto' + identifier + ';'
6.8.6 jump-statement := 'continue' + ';'
6.8.6 jump-statement := 'break' + ';'
6.8.6 jump-statement := 'return' + expression-opt + ';'

A.2.4 External Definitions

6.9 translation-unit := external-declaration
6.9 translation-unit := translation-unit + external-declaration
6.9 external-declaration := function-definition
6.9 external-declaration := definition
6.9.1 function-definition := declaration-specifiers + declarator + declaration-list-opt + compound-statement
6.9.1 declaration-list := declaration
6.9.1 declaration-list := declaration-list + declaration

A.3 Preprocessing Directives

# group-opt is a bad way of saying "zero or more groups-parts"
6.10 preprocessing-file := group-opt
6.10 group := group-part
6.10 group := group + group-part
6.10 group-part := if-section
6.10 group-part := control-line 
6.10 group-part := text-line
6.10 group-part := '#' + non-directive
6.10 if-section := if-group + elif-groups-opt + else-group-opt + endif-line
6.10 if-group := '#' + 'if' + constant-expression + new-line + group-opt
6.10 if-group := '#' + 'ifdef' + identifier + new-line + group-opt
6.10 if-group := '#' + 'ifndef' + identifier + new-line + group-opt
6.10 elif-groups := elif-group | elif-groups + elif-group
6.10 elif-group := '#' + 'elif' + constant-expression + new-line + group-opt
6.10 else-group := '#' + 'else' + new-line + group-opt
6.10 endif-line := '#' + 'endif' + new-line
6.10 control-line := '#' + 'include' pp-tokens + new-line
6.10 control-line := '#' + 'define' + identifier + replacement-list + new-line
# This is dumb: really means: lparen + list(identifier, 'comma') + ')' + list(pp-tokens)
6.10 control-line := '#' + 'define' + identifier + lparen + identifier-list-opt + ')' + replacement-list + new-line
6.10 control-line := '#' + 'define' + identifier + lparen + '...' + ')' + replacement-list + new-line
6.10 control-line := '#' + 'define' + identifier + lparen + identifier-list + ',' + '...' + ')' + replacement-list + new-line
6.10 control-line := '#' + 'undef' + identifier + new-line
6.10 control-line := '#' + 'line' + pp-tokens + new-line
6.10 control-line := '#' + 'error' + pp-tokens-opt + new-line
6.10 control-line := '#' + 'pragma' + pp-tokens-opt + new-line
6.10 control-line := '#' + new-line
# pp-tokens = zero or more preprocessing-token
6.10 text-line := pp-tokens-opt + new-line
6.10 non-directive := pp-tokens + new-line
6.10 lparen := \((?:\s)
6.10 replacement-list := pp-tokens-opt
6.10 pp-tokens := preprocessing-token
6.10 pp-tokens := pp-tokens + preprocessing-token
6.10 new-line := \n

Regular Expressions

universal-character-name := \\[uU]([0-9a-fA-F]{4})([0-9a-fA-F]{4})?
integer-constant := ([1-9][0-9]*|0[xX][0-9a-fA-F]+|0[0-7]*)([uU](ll|LL)|[uU][lL]?|(ll|LL)[uU]?|[lL][uU])?
decimal-constant := [1-9][0-9]+
octal-constant := 0[0-7]+
hexadecimal-constant := 0[xX][0-9a-fA-F]+
integer-suffix := ([uU](ll|LL)|[uU][lL]?|(ll|LL)[uU]?|[lL][uU])
decimal-floating-constant := (([0-9]+)?\.([0-9]+)|[0-9]+\.)([eE][-+]?[0-9]+)?[flFL]?
hexadecimal-floating-constant := 0[xX](([0-9a-fA-F]+)?\.([0-9a-fA-F]+)|[0-9a-fA-F]+\.)[pP][-+]?[0-9]+[flFL]?
fractional-constant := (([0-9]+)?\.([0-9]+)|[0-9]+\.)
exponent-part := [eE][-+]?[0-9]+
hexadecimal-fractional-constant := (([0-9a-fA-F]+)?\.([0-9a-fA-F]+)|[0-9a-fA-F]+\.)
binary-exponent-part := [pP][-+]?[0-9]+
character-constant := [L]?'([^\\'\n]|\\[\\\"\'nrbtfav\?]|\\[0-7]{1,3}|\\x[0-9a-fA-F]+|\\[uU]([0-9a-fA-F]{4})([0-9a-fA-F]{4})?)+'
escape-sequence := (\\[\\"\'nrbtfav\?]|\\[0-7]{1,3}|\\x[0-9a-fA-F]+|\\[uU]([0-9a-fA-F]{4})([0-9a-fA-F]{4})?)
string-literal := "([^\\\"\n]|\\[\\"\'nrbtfav\?]|\\[0-7]{1,3}|\\x[0-9a-fA-F]+|\\[uU]([0-9a-fA-F]{4})([0-9a-fA-F]{4})?)*"
pp-number := [\.]?[0-9]([0-9]|[a-zA-Z_]|\\[uU]([0-9a-fA-F]{4})([0-9a-fA-F]{4})?|[eEpP][-+]|\.)+
header-name := [<][^\n>]+[>]|["][^\n"]+["]
