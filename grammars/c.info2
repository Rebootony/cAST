A.1.1 Lexical Elements

6.4 token := keyword | identifier | constant | string-literal | punctuator
6.4 preprocessing-token := header-name | identifier | pp-number | character-constant | string-literal | punctuator

A.1.2 Keywords

6.4.1 keyword := 'auto' | 'enum' | ...

A.1.3 Identifiers

6.4.2.1 identifier := ([a-zA-Z_]|\\[uU]([0-9a-fA-F]{4})([0-9a-fA-F]{4})?)([a-zA-Z0-9_]|\\[uU]([0-9a-fA-F]{4})([0-9a-fA-F]{4})?)*

A.1.4 Universal Character Names

6.4.3 universal-character-name := \\[uU]([0-9a-fA-F]{4})([0-9a-fA-F]{4})?

A.1.5 Constants

6.4.4 constant := integer-contant | floating-constant | enumeration-constant | character-constant
6.4.4 integer-constant := ([1-9][0-9]*|0[xX][0-9a-fA-F]+|0[0-7]*)([uU](ll|LL)|[uU][lL]?|(ll|LL)[uU]?|[lL][uU])?
6.4.4.2 floating-constant := decimal-floating-constant | hexadecimal-floating-constant
6.4.4.2 decimal-floating-constant := (([0-9]+)?\.([0-9]+)|[0-9]+\.)([eE][-+]?[0-9]+)?[flFL]?
6.4.4.2 hexadecimal-floating-constant := 0[xX](([0-9a-fA-F]+)?\.([0-9a-fA-F]+)|[0-9a-fA-F]+\.)[pP][-+]?[0-9]+[flFL]?
6.4.4.3 enumeration-constant := identifier
6.4.4.4 character-constant := [L]?'([^\\'\n]|\\[\\\"\'nrbtfav\?]|\\[0-7]{1,3}|\\x[0-9a-fA-F]+|\\[uU]([0-9a-fA-F]{4})([0-9a-fA-F]{4})?)+'

A.1.6 String Literals

6.4.5 string-literal := "([^\\\"\n]|\\[\\"\'nrbtfav\?]|\\[0-7]{1,3}|\\x[0-9a-fA-F]+|\\[uU]([0-9a-fA-F]{4})([0-9a-fA-F]{4})?)*"

A.1.7 Punctuators

6.4.6 punctuator := '[' | ']' | ...

A.1.8 Header Names

header-name := [<][^\n>]+[>]|["][^\n"]+["]

A.1.9 Preprocessing Numbers

pp-number := [\.]?[0-9]([0-9]|[a-zA-Z_]|\\[uU]([0-9a-fA-F]{4})([0-9a-fA-F]{4})?|[eEpP][-+]|\.)+

A.2 Phrase Structure Grammar

A.2.1 Expressions

6.5.1 primary-expression := identifier | constant | string-literal | '(' + expression + ')'
6.5.2 postfix-expression := primary-expression
6.5.2 postfix-expression := postfix-expression + '[' + expression + ']'
6.5.2 postfix-expression := postfix-expression + '[' + argument-expression-list-opt + ']'
6.5.2 postfix-expression := postfix-expression + '.' + identifier
6.5.2 postfix-expression := postfix-expression + '->' + identifier
6.5.2 postfix-expression := postfix-expression + '++'
6.5.2 postfix-expression := postfix-expression + '--'
6.5.2 postfix-expression := '(' + type-name + ')' + '{' + initializer-list + '}'
6.5.2 postfix-expression := '(' + type-name + ')' + '{' + initializer-list + ',' + '}'
6.5.2 argument-expression-list := assignment-expression
6.5.2 argument-expression-list := argument-expression-list + ',' + assignment-expression
6.5.3 unary-expression := postfix-expression
6.5.3 unary-expression := '++' + unary-expression
6.5.3 unary-expression := '--' + unary-expression
6.5.3 unary-expression := unary-operator + cast-expression
6.5.3 unary-expression := 'sizeof' + unary-expression
6.5.3 unary-expression := 'sizeof' + '(' + type-name + ')'
6.5.3 unary-operator := '&' | '*' | '+' | '-' | '~' | '!'
6.5.4 cast-expression := unary-expression
6.5.4 cast-expression := '(' + type-name + ')' + cast-expression
6.5.5 multiplicative-expression := cast-expression
6.5.5 multiplicative-expression := multiplicative-expression + '*' + cast-expression 
6.5.5 multiplicative-expression := multiplicative-expression + '/' + cast-expression 
6.5.5 multiplicative-expression := multiplicative-expression + '%' + cast-expression 
6.5.6 additive-expression := multiplicative-expression
6.5.6 additive-expression := additive-expression + '+' + multiplicative-expression 
6.5.6 additive-expression := additive-expression + '-' + multiplicative-expression 
6.5.7 shift-expression := additive-expression
6.5.7 shift-expression := shift-expression + '<<' + additive-expression
6.5.7 shift-expression := shift-expression + '>>' + additive-expression
6.5.8 relational-expression := shift-expression
6.5.8 relational-expression := relational-expression + '<' + shift-expression
6.5.8 relational-expression := relational-expression + '>' + shift-expression
6.5.8 relational-expression := relational-expression + '<=' + shift-expression
6.5.8 relational-expression := relational-expression + '>=' + shift-expression
6.5.9 equality-expression := relational-expression
6.5.9 equality-expression := equality-expression + '==' + relational-expression
6.5.9 equality-expression := equality-expression + '!=' + relational-expression
6.5.10 and-expression := equality-expression
6.5.10 and-expression := and-expression + '&' equality-expression 
6.5.11 exclusive-or-expression := and-expression
6.5.11 exclusive-or-expression := inclusive-or-expression + '^' and-expression
6.5.12 inclusive-or-expression := exclusive-or-expression
6.5.12 inclusive-or-expression := inclusive-or-expression + '|' + exclusive-or-expression
6.5.13 logical-and-expression := inclusive-or-expression
6.5.13 logical-and-expression := logical-and-expression + '&&' + inclusive-or-expression
6.5.14 logical-or-expression := logical-and-expression
6.5.14 logical-or-expression := logical-or-expression + '||' + logical-and-expression
6.5.15 conditional-expression := logical-or-expression
6.5.15 conditional-expression := logical-or-expression + '?' + expression + ':' + conditional-expression
6.5.16 assignment-expression := conditional-expression
6.5.16 assignment-expression := unary-expression + assignment-operator + assignment-expression
6.5.16 assignment-operator := '=' | '*=' | ...
6.5.17 expression := assignment-expression 
6.5.17 expression := expression + ',' + assignment-expression
6.6 constant-expression := conditional-expression

A.2.2 Declarations

6.7 declaration := list(declaration-specifier) + init-declarator-list-opt
6.7 declaration-specifier := storage-class-specifier | type-specifier | type-qualifier | function-specifier
6.7 init-declarator-list-opt := list(init-declarator) | _empty
6.7 init-declarator := declarator | declarator + '=' + initializer

# How/where is it stored?
6.7.1 storage-class-specifier := 'typedef' | 'extern' | 'static' | 'auto' | 'register'

# What type is it?
6.7.2 type-specifier := 'void' | 'char' | 'short' | 'int' | 'long' | 'float' | 'double' | 'signed' | 'unsigned' | '_Bool' | '_Complex'
6.7.2 type-specifier := struct-or-union-specifier | enum-specifier | typedef-name
6.7.2.1 struct-or-union-specifier := struct-or-union + identifier-opt + struct-or-union-specifier-body
6.7.2.1 struct-or-union-specifier-body := '{' + list(struct-declaration) + '}' | _empty
6.7.2.1 struct-or-union := 'struct' | 'union'
6.7.2.1 struct-declaration := list(specifier-qualifier) + list(struct-declarator, ',') + ';'
6.7.2.1 specifier-qualifier := type-specifier | type-qualifier
6.7.2.1 struct-declarator := struct-declarator-size
6.7.2.1 struct-declarator := declarator + struct-declarator-size-opt
6.7.2.1 struct-declarator-size := ':' + constant-expression
6.7.2.1 struct-declarator-size-opt : struct-declarator-size | _empty
6.7.2.2 enum-specifier := 'enum' + enum-specifier-sub
6.7.2.2 enum-specifier-sub := identifier enum-specifier-body-opt | enum-specifier-body
6.7.2.2 enum-specifier-body := '{' + list(enumerator, ',') + comma-opt + '}'
6.7.2.2 enum-specifier-body-opt := enum-specifier-body | _empty
6.7.2.2 comma-opt := ',' | _empty
6.7.2.2 enumerator := enumeration-constant + enumerator-assignment-opt
6.7.2.2 enumerator-assignment-opt := enumerator-assignment | _empty
6.7.2.2 enumerator-assignment := '=' + constant-expression

# What other properties does it have?
6.7.3 type-qualifier := 'const' | 'restrict' | 'volatile'
6.7.4 function-specifier := 'inline'

# What is its name/size/parameters?
6.7.5 declarator := pointer-opt + direct-declarator

# (expr)
6.7.5 direct-declarator := identifier
6.7.5 direct-declarator := '(' + declarator + ')'
6.7.5 direct-declarator := direct-declarator + ^'[' + direct-declarator-expr + ']'
6.7.5 direct-declarator := direct-declarator + ^'(' + direct-declarator-parameter-list + ')'
6.7.5 direct-declarator-expr := type-qualifier-list-opt + direct-declarator-size | _empty
6.7.5 direct-declarator-size := static-opt + assignment-expression | type-qualifier-list-opt + '*'
6.7.5 direct-declarator-parameter-list := parameter-type-list | list(identifier) | _empty

6.7.5 pointer-opt := pointer | _empty
6.7.5 pointer := list(pointer-sub)
6.7.5 pointer-sub := '*' + type-qualifier-list-opt
6.7.5 type-qualifier-list-opt := list(type-qualifier) | _empty
6.7.5 parameter-type-list := list(parameter-declaration, ',') + va-args
6.7.5 parameter-type-list-opt := parameter-type-list | _empty
6.7.5 va-args := ',' + '...' | _empty
6.7.5 parameter-declaration := list(declaration-specifier) + parameter-declaration-sub
6.7.5 parameter-declaration-sub := declarator | abstract-declarator | _empty
6.7.5 identifier-list-opt := list(identifier) | _empty

# Types
6.7.6 type-name := list(specifier-qualifier) + abstract-declarator-opt
6.7.6 abstract-declarator := pointer-opt + direct-abstract-declarator-opt

# (expr)
6.7.6 direct-abstract-declarator-opt := direct-abstract-declarator | _empty
6.7.6 direct-abstract-declarator := '(' + abstract-declarator + ')'
6.7.6 direct-abstract-declarator := direct-abstract-declarator-opt + ^'[' + direct-abstract-declarator-expr + ']'
6.7.6 direct-abstract-declarator := direct-abstract-declarator-opt + ^'(' + parameter-type-list-opt + ')'
6.7.6 direct-abstract-declarator-expr := type-qualifier-list-opt + static-opt + assignment-expression | '*' | _empty

6.7.6 static-opt := 'static' | _empty
6.7.7 typedef-name := identifier

# Initial value
6.7.8 initializer := assignment-expression
6.7.8 initializer := '{' + initializer-list + initializer-sub + '}'
6.7.8 initializer-sub := ',' | _empty
6.7.8 initializer-list := list(initilizer-list-item, ',')
6.7.8 initializer-list-item := designation-opt + initializer
6.7.8 designation := list(designator) + '='
6.7.8 designator := '[' + constant-expression + ']'
6.7.8 designator := '.' + identifier

A.2.3 Statements

6.8 statement := labeled-statement
6.8 statement := compound-statement
6.8 statement := expression-statement
6.8 statement := selection-statement
6.8 statement := iteration-statement
6.8 statement := jump-statement
6.8.1 labeled-statement := identifier + ':' + statement
6.8.1 labeled-statement := 'case' + constant-expression + ':' + statement
6.8.1 labeled-statement := 'default' + ':' + statement
6.8.2 compound-statement := '{' + block-item-list-opt + '}'
6.8.2 block-item-list-opt := list(block-item) | _empty
6.8.2 block-item := declaration | statement
6.8.3 expression-statement := expression-opt + ';'
6.8.4 selection-statement := 'if' + '(' + expression + ')' + statement + else-statement-opt
6.8.4 else-statement := 'else' + statement
6.8.4 else-statement-opt := else-statement | _empty
6.8.4 selection-statement := 'switch' + '(' + expression + ')' + statement
6.8.5 iteration-statement := 'while' + '(' + expression + ')' + statement
6.8.5 iteration-statement := 'do' + statement + 'while' + '(' + expression + ')' + ';'
6.8.5 iteration-statement := 'for' + '(' + for-init + for-cond + for-incr + ')' + statement
6.8.5 for-init := declaration + expression-opt | expression | _empty
6.8.5 for-cond := ';' + expression-opt
6.8.5 for-incr := ';' + expression-opt | _empty
6.8.6 jump-statement := 'goto' + identifier + ';'
6.8.6 jump-statement := 'continue'
6.8.6 jump-statement := 'break' + ';'
6.8.6 jump-statement := 'return' + expression-opt + ';'

A.2.4 External Definitions

6.9 translation-unit := list(external-declaration)
6.9 external-declaration := function-definition | declaration
6.9.1 function-definition := list(declaration-specifier) + declarator + declaration-list-opt + compound-statement
6.9.1 declaration-list-opt := list(declaration) | _empty

Regular Expressions

integer-constant := ([1-9][0-9]*|0[xX][0-9a-fA-F]+|0[0-7]*)([uU](ll|LL)|[uU][lL]?|(ll|LL)[uU]?|[lL][uU])?
decimal-constant := [1-9][0-9]+
octal-constant := 0[0-7]+
hexadecimal-constant := 0[xX][0-9a-fA-F]+
integer-suffix := ([uU](ll|LL)|[uU][lL]?|(ll|LL)[uU]?|[lL][uU])
decimal-floating-constant := (([0-9]+)?\.([0-9]+)|[0-9]+\.)([eE][-+]?[0-9]+)?[flFL]?
hexadecimal-floating-constant := 0[xX](([0-9a-fA-F]+)?\.([0-9a-fA-F]+)|[0-9a-fA-F]+\.)[pP][-+]?[0-9]+[flFL]?
fractional-constant := (([0-9]+)?\.([0-9]+)|[0-9]+\.)
exponent-part := [eE][-+]?[0-9]+
hexadecimal-fractional-constant := (([0-9a-fA-F]+)?\.([0-9a-fA-F]+)|[0-9a-fA-F]+\.)
binary-exponent-part := [pP][-+]?[0-9]+
character-constant := [L]?'([^\\'\n]|\\[\\\"\'nrbtfav\?]|\\[0-7]{1,3}|\\x[0-9a-fA-F]+|\\[uU]([0-9a-fA-F]{4})([0-9a-fA-F]{4})?)+'
escape-sequence := (\\[\\"\'nrbtfav\?]|\\[0-7]{1,3}|\\x[0-9a-fA-F]+|\\[uU]([0-9a-fA-F]{4})([0-9a-fA-F]{4})?)
string-literal := "([^\\\"\n]|\\[\\"\'nrbtfav\?]|\\[0-7]{1,3}|\\x[0-9a-fA-F]+|\\[uU]([0-9a-fA-F]{4})([0-9a-fA-F]{4})?)*"
pp-number := [\.]?[0-9]([0-9]|[a-zA-Z_]|\\[uU]([0-9a-fA-F]{4})([0-9a-fA-F]{4})?|[eEpP][-+]|\.)+
header-name := [<][^\n>]+[>]|["][^\n"]+["]
