define,1,1,#define,tests/cases/2/source.c
identifier,1,9,qux0,tests/cases/2/source.c
pp_number,1,14,7,tests/cases/2/source.c
separator,1,1,,tests/cases/2/source.c
define,2,1,#define,tests/cases/2/source.c
identifier,2,9,qux,tests/cases/2/source.c
identifier,2,13,qux0,tests/cases/2/source.c
separator,2,1,,tests/cases/2/source.c
define_function,3,1,#define,tests/cases/2/source.c
identifier,3,9,foo,tests/cases/2/source.c
lparen,3,12,(,tests/cases/2/source.c
identifier,3,13,x,tests/cases/2/source.c
comma,3,14,,,tests/cases/2/source.c
identifier,3,16,y,tests/cases/2/source.c
rparen,3,17,),tests/cases/2/source.c
identifier,3,19,x,tests/cases/2/source.c
add,3,20,+,tests/cases/2/source.c
identifier,3,21,y,tests/cases/2/source.c
separator,3,1,,tests/cases/2/source.c
csource,4,1,//          s  s  |c|,tests/cases/2/source.c
separator,4,1,,tests/cases/2/source.c
define,5,1,#define,tests/cases/2/source.c
identifier,5,9,bar,tests/cases/2/source.c
identifier,5,13,foo,tests/cases/2/source.c
sub,5,17,-,tests/cases/2/source.c
identifier,5,19,foo,tests/cases/2/source.c
lparen,5,22,(,tests/cases/2/source.c
pp_number,5,23,66,tests/cases/2/source.c
comma,5,25,,,tests/cases/2/source.c
pp_number,5,26,33,tests/cases/2/source.c
rparen,5,28,),tests/cases/2/source.c
sub,5,30,-,tests/cases/2/source.c
identifier,5,32,foo,tests/cases/2/source.c
sub,5,36,-,tests/cases/2/source.c
identifier,5,38,foo,tests/cases/2/source.c
separator,5,1,,tests/cases/2/source.c
csource,6,1,//          |---------c----------|,tests/cases/2/source.c
separator,6,1,,tests/cases/2/source.c
define,7,1,#define,tests/cases/2/source.c
identifier,7,9,baz,tests/cases/2/source.c
identifier,7,13,foo,tests/cases/2/source.c
lparen,7,16,(,tests/cases/2/source.c
pp_number,7,17,4,tests/cases/2/source.c
comma,7,18,,,tests/cases/2/source.c
pp_number,7,19,5,tests/cases/2/source.c
rparen,7,20,),tests/cases/2/source.c
separator,7,1,,tests/cases/2/source.c
csource,8,1,//              c c,tests/cases/2/source.c
separator,8,1,,tests/cases/2/source.c
define_function,9,1,#define,tests/cases/2/source.c
identifier,9,9,var,tests/cases/2/source.c
lparen,9,12,(,tests/cases/2/source.c
identifier,9,13,s,tests/cases/2/source.c
comma,9,14,,,tests/cases/2/source.c
identifier,9,16,t,tests/cases/2/source.c
comma,9,17,,,tests/cases/2/source.c
elipsis,9,19,...,tests/cases/2/source.c
rparen,9,22,),tests/cases/2/source.c
identifier,9,24,s,tests/cases/2/source.c
add,9,25,+,tests/cases/2/source.c
identifier,9,26,t,tests/cases/2/source.c
add,9,27,+,tests/cases/2/source.c
identifier,9,28,foo,tests/cases/2/source.c
lparen,9,31,(,tests/cases/2/source.c
identifier,9,32,__VA_ARGS__,tests/cases/2/source.c
rparen,9,43,),tests/cases/2/source.c
separator,9,1,,tests/cases/2/source.c
csource,10,1,// functions take ctokens as params, return ctokens.\n// replacement tokens are stored as ctokens.\n\nint main()\n{\n  int foo = 2;\n  printf("%d\n", 1000+7000);\n  printf("%d\n", var(1,2,qux,4));\n  printf("%d\n", bar(7,8));\n  printf("%d\n", foo(4+1,7-1));\n  return 0;\n}\n,tests/cases/2/source.c
separator,22,1,,tests/cases/2/source.c