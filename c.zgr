{
  "ll1": {
    "start": "translation_unit",
    "rules": [

      "token := keyword | 'identifier' | constant | 'string_literal' | punctuator",

      "keyword := 'auto' | 'break' | 'case' | 'char' | 'const' | 'continue' | 'default' | 'do' | 'double' | 'else' | 'enum' | 'extern' | 'float' | 'for' | 'goto' | 'if' | 'inline' | 'int' | 'long' | 'register' | 'restrict' | 'return' | 'short' | 'signed' | 'sizeof' | 'static' | 'struct' | 'switch' | 'typedef' | 'union' | 'unsigned' | 'void' | 'volatile' | 'while' | '_Bool' | '_Complex' | '_Imaginary'",

      "punctuator := 'arrow' | 'dot' | 'lbrace' | 'rbrace' | 'lsquare' | 'rsquare' | 'lparen' | 'rparen' | 'exclamation_point' | 'tilde' | 'sub' | 'add' | 'mul' | 'div' | 'ampersand' | 'decr' | 'incr' | 'or' | 'and' | 'bitor' | 'bitxor' | 'neq' | 'eq' | 'lteq' | 'gteq' | 'lt' | 'gt' | 'lshift' | 'rshift' | 'mod' | 'elipsis' | 'semi' | 'colon' | 'questionmark' | 'bitoreq' | 'bitxoreq' | 'bitandeq' | 'lshifteq' | 'rshifteq' | 'subeq' | 'addeq' | 'modeq' | 'muleq' | 'assign' | 'poundpound' | 'pound' | 'comma'",

      "terminals := 'AUTO' | 'BOOL' | 'BREAK' | 'CASE' | 'CHAR' | 'COMPLEX' | 'CONST' | 'CONTINUE' | 'DEFAULT' | 'DO' | 'DOUBLE' | 'ELSE' | 'ENUM' | 'EXTERN' | 'FLOAT' | 'FOR' | 'GOTO' | 'IF' | 'IMAGINARY' | 'INLINE' | 'INT' | 'LONG' | 'REGISTER' | 'RESTRICT' | 'RETURN' | 'SHORT' | 'SIGNED' | 'SIZEOF' | 'STATIC' | 'STRUCT' | 'SWITCH' | 'TYPEDEF' | 'UNION' | 'UNSIGNED' | 'VOID' | 'VOLATILE' | 'WHILE' | 'POUND' | 'UNIVERSAL_CHARACTER_NAME' | 'POUNDPOUND' | 'LBRACE' | 'RBRACE' | 'LSQUARE' | 'RSQUARE' | 'POUNDPOUND' | 'POUND' | 'ELIPSIS' | 'DOT' | 'QUESTIONMARK' | 'ARROW' | 'LTEQ' | 'GTEQ' | 'LT' | 'GT' | 'SEMI' | 'LPAREN' | 'RPAREN' | 'EQ' | 'NEQ' | 'ASSIGN' | 'LBRACE' | 'RBRACE' | 'LSQUARE' | 'RSQUARE' | 'COMMA' | 'COLON' | 'IDENTIFIER' | 'STRING_LITERAL' | 'NUMBER' | 'INCR' | 'DECR' | 'ADDEQ' | 'SUBEQ' | 'MULEQ' | 'DIVEQ' | 'MODEQ' | 'ADD' | 'SUB' | 'MUL' | 'DIV' | 'MOD' | 'AND' | 'OR' | 'BITAND' | 'BITOR' | 'NOT' | 'BITXOR' | 'TILDE' | 'EXCLAMATION_POINT' | 'LSHIFT' | 'RSHIFT' | 'LSHIFTEQ' | 'RSHIFTEQ' | 'BITANDEQ' | 'BITXOREQ' | 'BITOREQ' | 'INTEGER_CONSTANT' | 'HEADER_NAME' | 'DECIMAL_FLOATING_CONSTANT' | 'HEXADECIMAL_FLOATING_CONSTANT' | 'CHARACTER_CONSTANT'"
    ]
  },
  "expr": [
    {
      "nonterminal": "_expr",
      "binding_power": [
          {"associativity": "left", "terminals": ["comma"]},
          {"associativity": "right", "terminals": ["assign", "addeq", "subeq", "muleq", "diveq", "modeq", "bitoreq", "bitandeq", "bitxoreq", "lshifteq", "rshifteq"]},
          {"associativity": "right", "terminals": ["questionmark"]},
          {"associativity": "left", "terminals": ["or"]},
          {"associativity": "left", "terminals": ["and"]},
          {"associativity": "left", "terminals": ["bitand"]},
          {"associativity": "left", "terminals": ["bitxor"]},
          {"associativity": "left", "terminals": ["bitor"]},
          {"associativity": "right", "terminals": ["eq", "neq"]},
          {"associativity": "left", "terminals": ["lt", "gt", "gteq", "lteq"]},
          {"associativity": "left", "terminals": ["lshift", "rshift"]},
          {"associativity": "left", "terminals": ["add", "sub"]},
          {"associativity": "left", "terminals": ["mul", "div", "mod"]},
          {"associativity": "unary", "terminals": ["sub", "incr", "decr", "mul", "bitand", "not", "bitnot"]},
          {"associativity": "left", "terminals": ["lparen", "lsquare", "dot", "arrow", "incr", "decr"]}
      ],
      "rules": [
        "_expr := 'identifier' + ^'lparen' + list(_expr, 'comma') + 'rparen' -> FuncCall( name=$0, params=$2 )",
        "_expr := 'identifier' + ^'lsquare' + list(_expr, 'comma') + 'rsquare' -> ArrayIndex( name=$0, params=$2 )",
        "_expr := _expr + ^'dot' + _expr -> MemberSelect( object=$0, member=$2 )",
        "_expr := _expr + ^'arrow' + _expr -> DerefMemberSelect( object=$0, member=$2 )",
        "_expr := _expr + ^'decr' -> PostDecr( var=$0 )",
        "_expr := _expr + ^'incr' -> PostIncr( var=$0 )",
        "_expr := 'decr' + _expr -> PreDecr( var=$1 )",
        "_expr := 'incr' + _expr -> PreIncr( var=$1 )",
        "_expr := 'bitand' + _expr -> AddressOf( var=$1 )",
        "_expr := 'mul' + _expr -> Dereference( var=$1 )",
        "_expr := _expr + 'add' + _expr -> Add( left=$0, right=$2 )",
        "_expr := _expr + 'sub' + _expr -> Sub( left=$0, right=$2 )",
        "_expr := _expr + 'lt' + _expr -> LessThan( left=$0, right=$2 )",
        "_expr := _expr + 'gt' + _expr -> GreaterThan( left=$0, right=$2 )",
        "_expr := _expr + 'lteq' + _expr -> LessThanEq( left=$0, right=$2 )",
        "_expr := _expr + 'gteq' + _expr -> GreaterThanEq( left=$0, right=$2 )",
        "_expr := _expr + 'mul' + _expr -> Mul( left=$0, right=$2 )",
        "_expr := _expr + 'div' + _expr -> Div( left=$0, right=$2 )",
        "_expr := _expr + 'mod' + _expr -> Mod( left=$0, right=$2 )",
        "_expr := _expr + 'eq' + _expr -> Equals( left=$0, right=$2 )",
        "_expr := _expr + 'assign' + _expr -> Assign( var=$0, value=$2 )",
        "_expr := _expr + 'comma' + _expr -> Comma( left=$0, right=$2 )",
        "_expr := _expr + 'lshift' + _expr -> LeftShift( left=$0, right=$2 )",
        "_expr := _expr + 'rshift' + _expr -> RightShift( left=$0, right=$2 )",
        "_expr := _expr + 'bitand' + _expr -> BitAND( left=$0, right=$2 )",
        "_expr := _expr + 'bitor' + _expr -> BitOR( left=$0, right=$2 )",
        "_expr := _expr + 'bitxor' + _expr -> BitXOR( left=$0, right=$2 )",
        "_expr := _expr + 'addeq' + _expr -> AddAssign( left=$0, right=$2 )",
        "_expr := _expr + 'subeq' + _expr -> SubtractAssign( left=$0, right=$2 )",
        "_expr := _expr + 'muleq' + _expr -> MultiplyAssign( left=$0, right=$2 )",
        "_expr := _expr + 'diveq' + _expr -> DivideAssign( left=$0, right=$2 )",
        "_expr := _expr + 'modeq' + _expr -> ModAssign( left=$0, right=$2 )",
        "_expr := _expr + 'bitandeq' + _expr -> ANDAssign( left=$0, right=$2 )",
        "_expr := _expr + 'bitoreq' + _expr -> ORAssign( left=$0, right=$2 )",
        "_expr := _expr + 'bitxoreq' + _expr -> XORAssign( left=$0, right=$2 )",
        "_expr := _expr + 'lshifteq' + _expr -> LeftShiftAssign( left=$0, right=$2 )",
        "_expr := _expr + 'rshifteq' + _expr -> RightShiftAssign( left=$0, right=$2 )",
        "_expr := _expr + ^'questionmark' + _expr + 'colon' + _expr -> TernaryOperator( cond=$0, true=$2, false=$4 )",
        "_expr := 'identifier' | constant | 'string_literal'",
        "_expr := 'lparen' + _expr + 'rparen'"
      ]
    },
    {
      "nonterminal": "_direct_declarator",
      "rules": [
        "_direct_declarator := 'identifier'",
        "_direct_declarator := _direct_declarator + ^'lsquare' + list(type_qualifier) + 'rsquare'"
      ],
      "binding_power": [
          {"associativity": "left", "terminals": ["lsquare"]}
      ]
    }
  ]
}
