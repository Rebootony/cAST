{
  "ll1": {
    "start": "pp_file",
    "rules": [

        "punctuator := 'arrow' | 'dot' | 'lbrace' | 'rbrace' | 'lsquare' | 'rsquare' | 'lparen' | 'rparen' | 'exclamation_point' | 'tilde' | 'sub' | 'add' | 'mul' | 'div' | 'ampersand' | 'decr' | 'incr' | 'or' | 'and' | 'bitor' | 'bitxor' | 'neq' | 'eq' | 'lteq' | 'gteq' | 'lt' | 'gt' | 'lshift' | 'rshift' | 'mod' | 'elipsis' | 'semi' | 'colon' | 'questionmark' | 'bitand' | 'bitnot' | 'bitor' | 'bitxor' | 'bitoreq' | 'bitxoreq' | 'bitandeq' | 'lshifteq' | 'rshifteq' | 'subeq' | 'addeq' | 'modeq' | 'muleq' | 'assign' | 'poundpound' | 'pound' | 'comma' | 'defined'",
        
        "pp_tokens := 'header_global' | 'header_local' | punctuator | 'identifier' | 'pp_number' | 'character_constant' | 'string_literal'",

        "pp_file := pp_nodes_list -> PPFile( nodes=$0 )",
        "pp_nodes := 'csource' | pp_directive",
        "pp_nodes_list := tlist(pp_nodes, 'separator') | ε",
        "pp_directive := if_section | control_line",
        "if_section := if_part + list(elseif_part) + else_part + 'endif' -> IfSection( if=$0, elif=$1, else=$2 )",
        "if_part := 'if' + _expr + pp_nodes_list -> If( expr=$1, nodes=$2 )",
        "if_part := 'ifdef' + 'identifier' + pp_nodes_list -> IfDef( ident=$1, nodes=$2 )",
        "if_part := 'ifndef' + 'identifier' + pp_nodes_list -> IfNDef( ident=$1, nodes=$2 )",
        "elseif_part := 'elif' + _expr + pp_nodes_list -> ElseIf( expr=$1, nodes=$2 )",
        "else_part := 'else' + pp_nodes_list -> Else( nodes=$1 )| ε",
        "control_line := include_line | define_line | pragma_line | error_line | undef_line | line_line",
        "include_line := 'include' + include_type -> Include( file=$1 )",
        "include_type := 'header_global' | 'header_local' | 'identifier'",
        "define_line := 'define' + 'identifier' + replacement_list -> Define( ident=$1, body=$2 )",
        "define_line := 'define_function' + 'identifier' + 'lparen' + list('identifier', 'comma') + 'rparen' + replacement_list -> DefineFunction( ident=$1, params=$3, body=$5 )",
        "replacement_list := list(pp_tokens) -> ReplacementList( tokens=$0 ) | ε",
        "pragma_line := 'pragma' + list(pp_tokens) -> Pragma( tokens=$1 )",
        "error_line := 'error' + list(pp_tokens) -> Error( tokens=$1 )",
        "undef_line := 'undef' + 'identifier' -> Undef( ident=$1 )",
        "line_line := 'line' + list(pp_tokens) -> Line( tokens=$1 )",
        "identifier := 'identifier'"
    ]
  },
  "expr": [
    {
      "nonterminal": "_expr",
      "binding_power": [
          {"associativity": "left", "terminals": ["comma"]},
          {"associativity": "right", "terminals": ["questionmark"]},
          {"associativity": "left", "terminals": ["or"]},
          {"associativity": "left", "terminals": ["and"]},
          {"associativity": "left", "terminals": ["bitand"]},
          {"associativity": "left", "terminals": ["bitxor"]},
          {"associativity": "left", "terminals": ["bitor"]},
          {"associativity": "right", "terminals": ["eq", "neq"]},
          {"associativity": "left", "terminals": ["lt", "gt", "gteq", "lteq"]},
          {"associativity": "left", "terminals": ["lshift", "rshift"]},
          {"associativity": "left", "terminals": ["add", "sub"]},
          {"associativity": "left", "terminals": ["mul", "div", "mod"]},
          {"associativity": "unary", "terminals": ["sub", "mul", "bitand", "exclamation_point", "bitnot", "defined"]},
          {"associativity": "left", "terminals": ["lparen"]}
      ],
      "rules": [
        "_expr := 'identifier' + ^'lparen' + list(_expr, 'comma') + 'rparen' -> FuncCall( name=$0, params=$2 )",
        "_expr := 'defined' + _expr -> IsDefined( expr=$1 )",
        "_expr := _expr + 'add' + _expr -> Add( left=$0, right=$2 )",
        "_expr := _expr + 'sub' + _expr -> Sub( left=$0, right=$2 )",
        "_expr := _expr + 'lt' + _expr -> LessThan( left=$0, right=$2 )",
        "_expr := _expr + 'gt' + _expr -> GreaterThan( left=$0, right=$2 )",
        "_expr := _expr + 'lteq' + _expr -> LessThanEq( left=$0, right=$2 )",
        "_expr := _expr + 'gteq' + _expr -> GreaterThanEq( left=$0, right=$2 )",
        "_expr := _expr + 'mul' + _expr -> Mul( left=$0, right=$2 )",
        "_expr := _expr + 'div' + _expr -> Div( left=$0, right=$2 )",
        "_expr := _expr + 'mod' + _expr -> Mod( left=$0, right=$2 )",
        "_expr := _expr + 'eq' + _expr -> Equals( left=$0, right=$2 )",
        "_expr := _expr + 'neq' + _expr -> NotEquals( left=$0, right=$2 )",
        "_expr := _expr + 'comma' + _expr -> Comma( left=$0, right=$2 )",
        "_expr := _expr + 'lshift' + _expr -> LeftShift( left=$0, right=$2 )",
        "_expr := _expr + 'rshift' + _expr -> RightShift( left=$0, right=$2 )",
        "_expr := _expr + 'bitand' + _expr -> BitAND( left=$0, right=$2 )",
        "_expr := _expr + 'bitor' + _expr -> BitOR( left=$0, right=$2 )",
        "_expr := _expr + 'bitxor' + _expr -> BitXOR( left=$0, right=$2 )",
        "_expr := 'bitnot' + _expr -> BitNOT( expr=$1 )",
        "_expr := _expr + 'and' + _expr -> And( left=$0, right=$2 )",
        "_expr := _expr + 'or' + _expr -> Or( left=$0, right=$2 )",
        "_expr := 'exclamation_point' + _expr -> Not( expr=$1 )",
        "_expr := _expr + ^'questionmark' + _expr + 'colon' + _expr -> TernaryOperator( cond=$0, true=$2, false=$4 )",
        "_expr := 'identifier' | 'pp_number' | 'string_literal' | 'character_constant'",
        "_expr := 'lparen' + _expr + 'rparen' -> $1"
      ]
    }
  ]
}
