<external_declaration_hint () [test/cases/0/source.c line 3, col 1]>
<int (int) [test/cases/0/source.c line 3, col 1]>
<function_prototype_hint () [test/cases/0/source.c line 3, col 1]>
<identifier (func) [test/cases/0/source.c line 3, col 5]>
<lparen (() [test/cases/0/source.c line 3, col 9]>
<rparen ()) [test/cases/0/source.c line 3, col 10]>
<semi (;) [test/cases/0/source.c line 3, col 11]>
<external_declaration_hint () [test/cases/0/source.c line 13, col 1]>
<int (int) [test/cases/0/source.c line 13, col 1]>
<function_definition_hint () [test/cases/0/source.c line 13, col 1]>
<identifier (add) [test/cases/0/source.c line 13, col 5]>
<lparen (() [test/cases/0/source.c line 13, col 8]>
<named_parameter_hint () [test/cases/0/source.c line 13, col 9]>
<int (int) [test/cases/0/source.c line 13, col 9]>
<identifier (x) [test/cases/0/source.c line 13, col 13]>
<comma (,) [test/cases/0/source.c line 13, col 14]>
<named_parameter_hint () [test/cases/0/source.c line 13, col 16]>
<int (int) [test/cases/0/source.c line 13, col 16]>
<identifier (y) [test/cases/0/source.c line 13, col 20]>
<rparen ()) [test/cases/0/source.c line 13, col 21]>
<lbrace ({) [test/cases/0/source.c line 13, col 23]>
<return (return) [test/cases/0/source.c line 13, col 24]>
<identifier (x) [test/cases/0/source.c line 13, col 31]>
<add (+) [test/cases/0/source.c line 13, col 32]>
<identifier (y) [test/cases/0/source.c line 13, col 33]>
<semi (;) [test/cases/0/source.c line 13, col 34]>
<rbrace (}) [test/cases/0/source.c line 13, col 35]>
<external_declaration_hint () [test/cases/0/source.c line 18, col 1]>
<int (int) [test/cases/0/source.c line 18, col 1]>
<function_definition_hint () [test/cases/0/source.c line 18, col 1]>
<identifier (main) [test/cases/0/source.c line 18, col 5]>
<lparen (() [test/cases/0/source.c line 18, col 9]>
<rparen ()) [test/cases/0/source.c line 18, col 10]>
<lbrace ({) [test/cases/0/source.c line 19, col 1]>
<identifier (printf) [test/cases/0/source.c line 20, col 1]>
<lparen (() [test/cases/0/source.c line 20, col 7]>
<string_literal ("THETA %d\...) [test/cases/0/source.c line 20, col 8]>
<comma (,) [test/cases/0/source.c line 20, col 20]>
<integer_constant (1) [test/cases/0/source.c line 20, col 22]>
<add (+) [test/cases/0/source.c line 20, col 22]>
<integer_constant (10) [test/cases/0/source.c line 20, col 22]>
<sub (-) [test/cases/0/source.c line 20, col 22]>
<integer_constant (2) [test/cases/0/source.c line 20, col 22]>
<rparen ()) [test/cases/0/source.c line 20, col 27]>
<semi (;) [test/cases/0/source.c line 20, col 28]>
<identifier (printf) [test/cases/0/source.c line 21, col 1]>
<lparen (() [test/cases/0/source.c line 21, col 7]>
<string_literal ("PATH %s\n...) [test/cases/0/source.c line 21, col 8]>
<comma (,) [test/cases/0/source.c line 21, col 19]>
<string_literal ("c.c") [test/cases/0/source.c line 21, col 21]>
<rparen ()) [test/cases/0/source.c line 21, col 25]>
<semi (;) [test/cases/0/source.c line 21, col 26]>
<identifier (printf) [test/cases/0/source.c line 23, col 5]>
<lparen (() [test/cases/0/source.c line 23, col 11]>
<string_literal ("first\n") [test/cases/0/source.c line 23, col 12]>
<rparen ()) [test/cases/0/source.c line 23, col 21]>
<semi (;) [test/cases/0/source.c line 23, col 22]>
<int (int) [test/cases/0/source.c line 26, col 1]>
<identifier (a) [test/cases/0/source.c line 26, col 5]>
<assign (=) [test/cases/0/source.c line 26, col 7]>
<integer_constant (0) [test/cases/0/source.c line 26, col 9]>
<semi (;) [test/cases/0/source.c line 26, col 10]>
<identifier (printf) [test/cases/0/source.c line 31, col 5]>
<lparen (() [test/cases/0/source.c line 31, col 11]>
<string_literal ("second %d...) [test/cases/0/source.c line 31, col 12]>
<comma (,) [test/cases/0/source.c line 31, col 25]>
<integer_constant (1) [test/cases/0/source.c line 31, col 27]>
<rparen ()) [test/cases/0/source.c line 31, col 28]>
<semi (;) [test/cases/0/source.c line 31, col 29]>
<identifier (printf) [test/cases/0/source.c line 32, col 5]>
<lparen (() [test/cases/0/source.c line 32, col 11]>
<string_literal ("third\n") [test/cases/0/source.c line 32, col 12]>
<rparen ()) [test/cases/0/source.c line 32, col 21]>
<semi (;) [test/cases/0/source.c line 32, col 22]>
<identifier (a) [test/cases/0/source.c line 40, col 1]>
<addeq (+=) [test/cases/0/source.c line 40, col 3]>
<integer_constant (1) [test/cases/0/source.c line 40, col 6]>
<semi (;) [test/cases/0/source.c line 40, col 7]>
<return (return) [test/cases/0/source.c line 42, col 5]>
<integer_constant (0) [test/cases/0/source.c line 42, col 12]>
<semi (;) [test/cases/0/source.c line 42, col 13]>
<rbrace (}) [test/cases/0/source.c line 44, col 1]>
