<external_declaration_hint () [test/cases/13/source.c line 6, col 1]>
<int (int) [test/cases/13/source.c line 6, col 1]>
<function_definition_hint () [test/cases/13/source.c line 6, col 1]>
<identifier (main) [test/cases/13/source.c line 6, col 5]>
<lparen (() [test/cases/13/source.c line 6, col 9]>
<rparen ()) [test/cases/13/source.c line 6, col 10]>
<lbrace ({) [test/cases/13/source.c line 7, col 1]>
<int (int) [test/cases/13/source.c line 8, col 3]>
<identifier (x) [test/cases/13/source.c line 8, col 7]>
<semi (;) [test/cases/13/source.c line 8, col 8]>
<if (if) [test/cases/13/source.c line 10, col 3]>
<lparen (() [test/cases/13/source.c line 10, col 6]>
<integer_constant (1) [test/cases/13/source.c line 10, col 7]>
<rparen ()) [test/cases/13/source.c line 10, col 11]>
<identifier (printf) [test/cases/13/source.c line 10, col 13]>
<lparen (() [test/cases/13/source.c line 10, col 13]>
<string_literal ("pass\n") [test/cases/13/source.c line 10, col 13]>
<rparen ()) [test/cases/13/source.c line 10, col 13]>
<semi (;) [test/cases/13/source.c line 10, col 17]>
<endif () [test/cases/13/source.c line 10, col 17]>
<if (if) [test/cases/13/source.c line 11, col 3]>
<lparen (() [test/cases/13/source.c line 11, col 6]>
<integer_constant (1) [test/cases/13/source.c line 11, col 7]>
<rparen ()) [test/cases/13/source.c line 11, col 11]>
<lbrace ({) [test/cases/13/source.c line 11, col 13]>
<identifier (printf) [test/cases/13/source.c line 11, col 14]>
<lparen (() [test/cases/13/source.c line 11, col 14]>
<string_literal ("pass\n") [test/cases/13/source.c line 11, col 14]>
<rparen ()) [test/cases/13/source.c line 11, col 14]>
<semi (;) [test/cases/13/source.c line 11, col 18]>
<rbrace (}) [test/cases/13/source.c line 11, col 19]>
<endif () [test/cases/13/source.c line 11, col 19]>
<if (if) [test/cases/13/source.c line 12, col 3]>
<lparen (() [test/cases/13/source.c line 12, col 6]>
<integer_constant (0) [test/cases/13/source.c line 12, col 7]>
<rparen ()) [test/cases/13/source.c line 12, col 12]>
<identifier (printf) [test/cases/13/source.c line 12, col 14]>
<lparen (() [test/cases/13/source.c line 12, col 14]>
<string_literal ("fail\n") [test/cases/13/source.c line 12, col 14]>
<rparen ()) [test/cases/13/source.c line 12, col 14]>
<semi (;) [test/cases/13/source.c line 12, col 18]>
<endif () [test/cases/13/source.c line 12, col 18]>
<else (else) [test/cases/13/source.c line 12, col 20]>
<identifier (printf) [test/cases/13/source.c line 12, col 25]>
<lparen (() [test/cases/13/source.c line 12, col 25]>
<string_literal ("pass\n") [test/cases/13/source.c line 12, col 25]>
<rparen ()) [test/cases/13/source.c line 12, col 25]>
<semi (;) [test/cases/13/source.c line 12, col 29]>
<endif () [test/cases/13/source.c line 12, col 29]>
<if (if) [test/cases/13/source.c line 13, col 3]>
<lparen (() [test/cases/13/source.c line 13, col 6]>
<integer_constant (0) [test/cases/13/source.c line 13, col 7]>
<rparen ()) [test/cases/13/source.c line 13, col 12]>
<lbrace ({) [test/cases/13/source.c line 13, col 14]>
<identifier (printf) [test/cases/13/source.c line 13, col 15]>
<lparen (() [test/cases/13/source.c line 13, col 15]>
<string_literal ("fail\n") [test/cases/13/source.c line 13, col 15]>
<rparen ()) [test/cases/13/source.c line 13, col 15]>
<semi (;) [test/cases/13/source.c line 13, col 19]>
<rbrace (}) [test/cases/13/source.c line 13, col 20]>
<endif () [test/cases/13/source.c line 13, col 20]>
<else (else) [test/cases/13/source.c line 13, col 22]>
<identifier (printf) [test/cases/13/source.c line 13, col 27]>
<lparen (() [test/cases/13/source.c line 13, col 27]>
<string_literal ("pass\n") [test/cases/13/source.c line 13, col 27]>
<rparen ()) [test/cases/13/source.c line 13, col 27]>
<semi (;) [test/cases/13/source.c line 13, col 31]>
<endif () [test/cases/13/source.c line 13, col 31]>
<if (if) [test/cases/13/source.c line 14, col 3]>
<lparen (() [test/cases/13/source.c line 14, col 6]>
<integer_constant (0) [test/cases/13/source.c line 14, col 7]>
<rparen ()) [test/cases/13/source.c line 14, col 12]>
<lbrace ({) [test/cases/13/source.c line 14, col 14]>
<identifier (printf) [test/cases/13/source.c line 14, col 15]>
<lparen (() [test/cases/13/source.c line 14, col 15]>
<string_literal ("fail\n") [test/cases/13/source.c line 14, col 15]>
<rparen ()) [test/cases/13/source.c line 14, col 15]>
<semi (;) [test/cases/13/source.c line 14, col 19]>
<rbrace (}) [test/cases/13/source.c line 14, col 20]>
<endif () [test/cases/13/source.c line 14, col 20]>
<else (else) [test/cases/13/source.c line 14, col 22]>
<lbrace ({) [test/cases/13/source.c line 14, col 27]>
<identifier (printf) [test/cases/13/source.c line 14, col 28]>
<lparen (() [test/cases/13/source.c line 14, col 28]>
<string_literal ("pass\n") [test/cases/13/source.c line 14, col 28]>
<rparen ()) [test/cases/13/source.c line 14, col 28]>
<semi (;) [test/cases/13/source.c line 14, col 32]>
<rbrace (}) [test/cases/13/source.c line 14, col 33]>
<endif () [test/cases/13/source.c line 14, col 33]>
<if (if) [test/cases/13/source.c line 15, col 3]>
<lparen (() [test/cases/13/source.c line 15, col 6]>
<integer_constant (1) [test/cases/13/source.c line 15, col 7]>
<rparen ()) [test/cases/13/source.c line 15, col 11]>
<for (for) [test/cases/13/source.c line 15, col 13]>
<lparen (() [test/cases/13/source.c line 15, col 16]>
<identifier (x) [test/cases/13/source.c line 15, col 17]>
<assign (=) [test/cases/13/source.c line 15, col 18]>
<integer_constant (0) [test/cases/13/source.c line 15, col 19]>
<semi (;) [test/cases/13/source.c line 15, col 20]>
<identifier (x) [test/cases/13/source.c line 15, col 21]>
<lt (<) [test/cases/13/source.c line 15, col 22]>
<integer_constant (1) [test/cases/13/source.c line 15, col 23]>
<semi (;) [test/cases/13/source.c line 15, col 24]>
<identifier (x) [test/cases/13/source.c line 15, col 25]>
<incr (++) [test/cases/13/source.c line 15, col 26]>
<rparen ()) [test/cases/13/source.c line 15, col 28]>
<lbrace ({) [test/cases/13/source.c line 15, col 29]>
<identifier (printf) [test/cases/13/source.c line 15, col 30]>
<lparen (() [test/cases/13/source.c line 15, col 30]>
<string_literal ("pass\n") [test/cases/13/source.c line 15, col 30]>
<rparen ()) [test/cases/13/source.c line 15, col 30]>
<semi (;) [test/cases/13/source.c line 15, col 34]>
<rbrace (}) [test/cases/13/source.c line 15, col 35]>
<endif () [test/cases/13/source.c line 15, col 35]>
<if (if) [test/cases/13/source.c line 16, col 3]>
<lparen (() [test/cases/13/source.c line 16, col 6]>
<integer_constant (0) [test/cases/13/source.c line 16, col 7]>
<rparen ()) [test/cases/13/source.c line 16, col 12]>
<for (for) [test/cases/13/source.c line 16, col 14]>
<lparen (() [test/cases/13/source.c line 16, col 17]>
<identifier (x) [test/cases/13/source.c line 16, col 18]>
<assign (=) [test/cases/13/source.c line 16, col 19]>
<integer_constant (0) [test/cases/13/source.c line 16, col 20]>
<semi (;) [test/cases/13/source.c line 16, col 21]>
<identifier (x) [test/cases/13/source.c line 16, col 22]>
<lt (<) [test/cases/13/source.c line 16, col 23]>
<integer_constant (1) [test/cases/13/source.c line 16, col 24]>
<semi (;) [test/cases/13/source.c line 16, col 25]>
<identifier (x) [test/cases/13/source.c line 16, col 26]>
<incr (++) [test/cases/13/source.c line 16, col 27]>
<rparen ()) [test/cases/13/source.c line 16, col 29]>
<identifier (printf) [test/cases/13/source.c line 16, col 30]>
<lparen (() [test/cases/13/source.c line 16, col 30]>
<string_literal ("fail\n") [test/cases/13/source.c line 16, col 30]>
<rparen ()) [test/cases/13/source.c line 16, col 30]>
<semi (;) [test/cases/13/source.c line 16, col 34]>
<endif () [test/cases/13/source.c line 16, col 34]>
<else (else) [test/cases/13/source.c line 16, col 36]>
<for (for) [test/cases/13/source.c line 16, col 41]>
<lparen (() [test/cases/13/source.c line 16, col 44]>
<identifier (x) [test/cases/13/source.c line 16, col 45]>
<assign (=) [test/cases/13/source.c line 16, col 46]>
<integer_constant (0) [test/cases/13/source.c line 16, col 47]>
<semi (;) [test/cases/13/source.c line 16, col 48]>
<identifier (x) [test/cases/13/source.c line 16, col 49]>
<lt (<) [test/cases/13/source.c line 16, col 50]>
<integer_constant (1) [test/cases/13/source.c line 16, col 51]>
<semi (;) [test/cases/13/source.c line 16, col 52]>
<identifier (x) [test/cases/13/source.c line 16, col 53]>
<incr (++) [test/cases/13/source.c line 16, col 54]>
<rparen ()) [test/cases/13/source.c line 16, col 56]>
<identifier (printf) [test/cases/13/source.c line 16, col 57]>
<lparen (() [test/cases/13/source.c line 16, col 57]>
<string_literal ("pass\n") [test/cases/13/source.c line 16, col 57]>
<rparen ()) [test/cases/13/source.c line 16, col 57]>
<semi (;) [test/cases/13/source.c line 16, col 61]>
<endif () [test/cases/13/source.c line 16, col 61]>
<if (if) [test/cases/13/source.c line 17, col 3]>
<lparen (() [test/cases/13/source.c line 17, col 6]>
<integer_constant (0) [test/cases/13/source.c line 17, col 7]>
<rparen ()) [test/cases/13/source.c line 17, col 12]>
<lbrace ({) [test/cases/13/source.c line 17, col 14]>
<for (for) [test/cases/13/source.c line 17, col 15]>
<lparen (() [test/cases/13/source.c line 17, col 18]>
<identifier (x) [test/cases/13/source.c line 17, col 19]>
<assign (=) [test/cases/13/source.c line 17, col 20]>
<integer_constant (0) [test/cases/13/source.c line 17, col 21]>
<semi (;) [test/cases/13/source.c line 17, col 22]>
<identifier (x) [test/cases/13/source.c line 17, col 23]>
<lt (<) [test/cases/13/source.c line 17, col 24]>
<integer_constant (1) [test/cases/13/source.c line 17, col 25]>
<semi (;) [test/cases/13/source.c line 17, col 26]>
<identifier (x) [test/cases/13/source.c line 17, col 27]>
<incr (++) [test/cases/13/source.c line 17, col 28]>
<rparen ()) [test/cases/13/source.c line 17, col 30]>
<lbrace ({) [test/cases/13/source.c line 17, col 31]>
<identifier (printf) [test/cases/13/source.c line 17, col 32]>
<lparen (() [test/cases/13/source.c line 17, col 32]>
<string_literal ("fail\n") [test/cases/13/source.c line 17, col 32]>
<rparen ()) [test/cases/13/source.c line 17, col 32]>
<semi (;) [test/cases/13/source.c line 17, col 36]>
<rbrace (}) [test/cases/13/source.c line 17, col 37]>
<rbrace (}) [test/cases/13/source.c line 17, col 38]>
<endif () [test/cases/13/source.c line 17, col 38]>
<else (else) [test/cases/13/source.c line 17, col 40]>
<lbrace ({) [test/cases/13/source.c line 17, col 45]>
<for (for) [test/cases/13/source.c line 17, col 46]>
<lparen (() [test/cases/13/source.c line 17, col 49]>
<identifier (x) [test/cases/13/source.c line 17, col 50]>
<assign (=) [test/cases/13/source.c line 17, col 51]>
<integer_constant (0) [test/cases/13/source.c line 17, col 52]>
<semi (;) [test/cases/13/source.c line 17, col 53]>
<identifier (x) [test/cases/13/source.c line 17, col 54]>
<lt (<) [test/cases/13/source.c line 17, col 55]>
<integer_constant (1) [test/cases/13/source.c line 17, col 56]>
<semi (;) [test/cases/13/source.c line 17, col 57]>
<identifier (x) [test/cases/13/source.c line 17, col 58]>
<incr (++) [test/cases/13/source.c line 17, col 59]>
<rparen ()) [test/cases/13/source.c line 17, col 61]>
<lbrace ({) [test/cases/13/source.c line 17, col 62]>
<identifier (printf) [test/cases/13/source.c line 17, col 63]>
<lparen (() [test/cases/13/source.c line 17, col 63]>
<string_literal ("pass\n") [test/cases/13/source.c line 17, col 63]>
<rparen ()) [test/cases/13/source.c line 17, col 63]>
<semi (;) [test/cases/13/source.c line 17, col 67]>
<rbrace (}) [test/cases/13/source.c line 17, col 68]>
<rbrace (}) [test/cases/13/source.c line 17, col 69]>
<endif () [test/cases/13/source.c line 17, col 69]>
<if (if) [test/cases/13/source.c line 18, col 3]>
<lparen (() [test/cases/13/source.c line 18, col 6]>
<integer_constant (0) [test/cases/13/source.c line 18, col 7]>
<rparen ()) [test/cases/13/source.c line 18, col 12]>
<for (for) [test/cases/13/source.c line 18, col 14]>
<lparen (() [test/cases/13/source.c line 18, col 17]>
<identifier (x) [test/cases/13/source.c line 18, col 18]>
<assign (=) [test/cases/13/source.c line 18, col 19]>
<integer_constant (0) [test/cases/13/source.c line 18, col 20]>
<semi (;) [test/cases/13/source.c line 18, col 21]>
<identifier (x) [test/cases/13/source.c line 18, col 22]>
<lt (<) [test/cases/13/source.c line 18, col 23]>
<integer_constant (1) [test/cases/13/source.c line 18, col 24]>
<semi (;) [test/cases/13/source.c line 18, col 25]>
<identifier (x) [test/cases/13/source.c line 18, col 26]>
<incr (++) [test/cases/13/source.c line 18, col 27]>
<rparen ()) [test/cases/13/source.c line 18, col 29]>
<lbrace ({) [test/cases/13/source.c line 18, col 30]>
<identifier (printf) [test/cases/13/source.c line 18, col 31]>
<lparen (() [test/cases/13/source.c line 18, col 31]>
<string_literal ("fail\n") [test/cases/13/source.c line 18, col 31]>
<rparen ()) [test/cases/13/source.c line 18, col 31]>
<semi (;) [test/cases/13/source.c line 18, col 35]>
<rbrace (}) [test/cases/13/source.c line 18, col 36]>
<endif () [test/cases/13/source.c line 18, col 36]>
<else (else) [test/cases/13/source.c line 18, col 38]>
<for (for) [test/cases/13/source.c line 18, col 43]>
<lparen (() [test/cases/13/source.c line 18, col 46]>
<identifier (x) [test/cases/13/source.c line 18, col 47]>
<assign (=) [test/cases/13/source.c line 18, col 48]>
<integer_constant (0) [test/cases/13/source.c line 18, col 49]>
<semi (;) [test/cases/13/source.c line 18, col 50]>
<identifier (x) [test/cases/13/source.c line 18, col 51]>
<lt (<) [test/cases/13/source.c line 18, col 52]>
<integer_constant (1) [test/cases/13/source.c line 18, col 53]>
<semi (;) [test/cases/13/source.c line 18, col 54]>
<identifier (x) [test/cases/13/source.c line 18, col 55]>
<incr (++) [test/cases/13/source.c line 18, col 56]>
<rparen ()) [test/cases/13/source.c line 18, col 58]>
<lbrace ({) [test/cases/13/source.c line 18, col 59]>
<identifier (printf) [test/cases/13/source.c line 18, col 60]>
<lparen (() [test/cases/13/source.c line 18, col 60]>
<string_literal ("pass\n") [test/cases/13/source.c line 18, col 60]>
<rparen ()) [test/cases/13/source.c line 18, col 60]>
<semi (;) [test/cases/13/source.c line 18, col 64]>
<rbrace (}) [test/cases/13/source.c line 18, col 65]>
<endif () [test/cases/13/source.c line 18, col 65]>
<if (if) [test/cases/13/source.c line 19, col 3]>
<lparen (() [test/cases/13/source.c line 19, col 5]>
<integer_constant (0) [test/cases/13/source.c line 19, col 6]>
<rparen ()) [test/cases/13/source.c line 19, col 11]>
<identifier (printf) [test/cases/13/source.c line 19, col 12]>
<lparen (() [test/cases/13/source.c line 19, col 12]>
<string_literal ("fail\n") [test/cases/13/source.c line 19, col 12]>
<rparen ()) [test/cases/13/source.c line 19, col 12]>
<semi (;) [test/cases/13/source.c line 19, col 16]>
<endif () [test/cases/13/source.c line 19, col 16]>
<else_if (else if) [test/cases/13/source.c line 19, col 17]>
<lparen (() [test/cases/13/source.c line 19, col 24]>
<integer_constant (1) [test/cases/13/source.c line 19, col 25]>
<rparen ()) [test/cases/13/source.c line 19, col 29]>
<identifier (printf) [test/cases/13/source.c line 19, col 30]>
<lparen (() [test/cases/13/source.c line 19, col 30]>
<string_literal ("pass\n") [test/cases/13/source.c line 19, col 30]>
<rparen ()) [test/cases/13/source.c line 19, col 30]>
<semi (;) [test/cases/13/source.c line 19, col 34]>
<endif () [test/cases/13/source.c line 19, col 34]>
<else (else) [test/cases/13/source.c line 19, col 35]>
<identifier (printf) [test/cases/13/source.c line 19, col 40]>
<lparen (() [test/cases/13/source.c line 19, col 40]>
<string_literal ("fail\n") [test/cases/13/source.c line 19, col 40]>
<rparen ()) [test/cases/13/source.c line 19, col 40]>
<semi (;) [test/cases/13/source.c line 19, col 44]>
<endif () [test/cases/13/source.c line 19, col 44]>
<rbrace (}) [test/cases/13/source.c line 20, col 1]>
