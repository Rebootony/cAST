<external_declaration_hint () [test/cases/2/source.c line 13, col 1]>
<int (int) [test/cases/2/source.c line 13, col 1]>
<function_definition_hint () [test/cases/2/source.c line 13, col 1]>
<identifier (main) [test/cases/2/source.c line 13, col 5]>
<lparen (() [test/cases/2/source.c line 13, col 9]>
<rparen ()) [test/cases/2/source.c line 13, col 10]>
<lbrace ({) [test/cases/2/source.c line 14, col 1]>
<int (int) [test/cases/2/source.c line 15, col 3]>
<identifier (foo) [test/cases/2/source.c line 15, col 7]>
<assign (=) [test/cases/2/source.c line 15, col 11]>
<integer_constant (2) [test/cases/2/source.c line 15, col 13]>
<semi (;) [test/cases/2/source.c line 15, col 14]>
<identifier (printf) [test/cases/2/source.c line 16, col 3]>
<lparen (() [test/cases/2/source.c line 16, col 9]>
<string_literal ("%d\n") [test/cases/2/source.c line 16, col 10]>
<comma (,) [test/cases/2/source.c line 16, col 16]>
<integer_constant (1000) [test/cases/2/source.c line 16, col 18]>
<add (+) [test/cases/2/source.c line 16, col 22]>
<integer_constant (7000) [test/cases/2/source.c line 16, col 23]>
<rparen ()) [test/cases/2/source.c line 16, col 27]>
<semi (;) [test/cases/2/source.c line 16, col 28]>
<identifier (printf) [test/cases/2/source.c line 17, col 3]>
<lparen (() [test/cases/2/source.c line 17, col 9]>
<string_literal ("%d\n") [test/cases/2/source.c line 17, col 10]>
<comma (,) [test/cases/2/source.c line 17, col 16]>
<integer_constant (1) [test/cases/2/source.c line 17, col 18]>
<add (+) [test/cases/2/source.c line 17, col 18]>
<integer_constant (2) [test/cases/2/source.c line 17, col 18]>
<add (+) [test/cases/2/source.c line 17, col 18]>
<integer_constant (7) [test/cases/2/source.c line 17, col 18]>
<add (+) [test/cases/2/source.c line 17, col 18]>
<integer_constant (4) [test/cases/2/source.c line 17, col 18]>
<rparen ()) [test/cases/2/source.c line 17, col 32]>
<semi (;) [test/cases/2/source.c line 17, col 33]>
<identifier (printf) [test/cases/2/source.c line 18, col 3]>
<lparen (() [test/cases/2/source.c line 18, col 9]>
<string_literal ("%d\n") [test/cases/2/source.c line 18, col 10]>
<comma (,) [test/cases/2/source.c line 18, col 16]>
<identifier (foo) [test/cases/2/source.c line 18, col 18]>
<sub (-) [test/cases/2/source.c line 18, col 18]>
<integer_constant (66) [test/cases/2/source.c line 18, col 18]>
<add (+) [test/cases/2/source.c line 18, col 18]>
<integer_constant (33) [test/cases/2/source.c line 18, col 18]>
<sub (-) [test/cases/2/source.c line 18, col 18]>
<identifier (foo) [test/cases/2/source.c line 18, col 18]>
<sub (-) [test/cases/2/source.c line 18, col 18]>
<integer_constant (7) [test/cases/2/source.c line 18, col 18]>
<add (+) [test/cases/2/source.c line 18, col 18]>
<integer_constant (8) [test/cases/2/source.c line 18, col 18]>
<rparen ()) [test/cases/2/source.c line 18, col 26]>
<semi (;) [test/cases/2/source.c line 18, col 27]>
<identifier (printf) [test/cases/2/source.c line 19, col 3]>
<lparen (() [test/cases/2/source.c line 19, col 9]>
<string_literal ("%d\n") [test/cases/2/source.c line 19, col 10]>
<comma (,) [test/cases/2/source.c line 19, col 16]>
<integer_constant (4) [test/cases/2/source.c line 19, col 18]>
<add (+) [test/cases/2/source.c line 19, col 18]>
<integer_constant (1) [test/cases/2/source.c line 19, col 18]>
<add (+) [test/cases/2/source.c line 19, col 18]>
<integer_constant (7) [test/cases/2/source.c line 19, col 18]>
<sub (-) [test/cases/2/source.c line 19, col 18]>
<integer_constant (1) [test/cases/2/source.c line 19, col 18]>
<rparen ()) [test/cases/2/source.c line 19, col 30]>
<semi (;) [test/cases/2/source.c line 19, col 31]>
<return (return) [test/cases/2/source.c line 20, col 3]>
<integer_constant (0) [test/cases/2/source.c line 20, col 10]>
<semi (;) [test/cases/2/source.c line 20, col 11]>
<rbrace (}) [test/cases/2/source.c line 21, col 1]>
